import numpy as np #una libreria che consente di creare anche campi di giochi come alla linea 5 con la funzione .zeros e oltre questo possiede anche grandi funzioni matematiche
import pygame
import sys
import math

BLUE =(0, 0, 255)
BLACK = (0, 0, 0)
YELLOW = (255,255, 0)
RED = (255, 0, 0)

ROW_COUNT = 6
COLUMN_COUNT = 7


def create_board(): # def per la creazione del terreno gi gioco
    board = np.zeros((ROW_COUNT, COLUMN_COUNT))
    return board

def drop_piece(board, row, col, piece):
    board[row][col] = piece
    

def is_valid_location(board, col):
    return board[ROW_COUNT - 1][col] == 0 # il conto delle righe meno uno è l'ultima riga e colonna è l'input del giocatore, serve a verificare che ci siano ancora slot liberi

def get_next_open_row(board,col):
    for r in range(ROW_COUNT):
        if board[r][col] == 0:
            return r

def print_board(board):
    print(np.flip(board, 0)) # così il campo si ribalta sull'asse x in modo da avere lo (0:0) in basso a sinistra

def winning_move(board, piece):
    # controllare la linea orizzontale
    for c in range(COLUMN_COUNT - 3): # -3 perchè ne servono 4 per vincere quindi se a uno restassero 3 spazi è automaticamente certo che non vincerà lì
        for r in range(ROW_COUNT):
            if board[r][c] == piece and board[r][c+1] == piece and board[r][c+2] == piece and board[r][c+3] == piece: # questo è per verificare se queste 4 posizioni consecutive corrispondono a dei pezzi effettivamente presenti
                return True

    # controllare la linea verticale
    for c in range(COLUMN_COUNT ): 
        for r in range(ROW_COUNT - 3):
            if board[r][c] == piece and board[r+1][c] == piece and board[r+2][c] == piece and board[r+3][c] == piece: 
                return True

    # controllare diagonali che partono dal basso
    for c in range(COLUMN_COUNT - 3): 
        for r in range(ROW_COUNT -3):
            if board[r][c] == piece and board[r+1][c+1] == piece and board[r+2][c+2] == piece and board[r+3][c+3] == piece: 
                return True


    # controllare diagonali che partono dall'alto
    for c in range(COLUMN_COUNT - 3): 
        for r in range(3, ROW_COUNT):
            if board[r][c] == piece and board[r-1][c+1] == piece and board[r-2][c+2] == piece and board[r-3][c+3] == piece: 
                return True

def draw_board(board):
    for c in range(COLUMN_COUNT):
        for r in range(ROW_COUNT):
            pygame.draw.rect(screen, BLUE, (c * squaresize, r * squaresize+squaresize, squaresize, squaresize)) #funzione per disegnare il rettangolo blu di sfondo
            pygame.draw.circle(screen, BLACK, (int(c * squaresize+squaresize/2), int(r * squaresize+squaresize+squaresize/2)), radius )
    
    for c in range(COLUMN_COUNT):
        for r in range(ROW_COUNT):
            if board[r][c] == 1:
                pygame.draw.circle(screen, RED, (int(c * squaresize+squaresize/2), heigth - int(r * squaresize+squaresize/2)), radius )
            elif board[r][c] == 2:
                pygame.draw.circle(screen, YELLOW, (int(c * squaresize+squaresize/2), heigth - int(r * squaresize+squaresize/2)), radius )        
    
    pygame.display.update()

board = create_board() # le coordinate del campo partono da (0:0) nell'angolo in basso a sinistra per poi arrivare a (6:7) in alto a destra (purtroppo numpy mette lo [0.0] in alto a sinistra quindi ci vorrà un altra specifica funzione per portarlo in basso)
print_board(board)
game_over = False
turn = 0 # il turno di giocata

pygame.init()

pygame.display.set_caption('Forza 4')

squaresize = 100 

width = COLUMN_COUNT * squaresize
heigth = (ROW_COUNT + 1) * squaresize # le righe sono una in più perchè così si ha lo spazio in alto per muovere il proprio cerchio

size = (width, heigth)

radius = int(squaresize/2 - 5)



screen = pygame.display.set_mode(size)
draw_board(board)
pygame.display.update()

myfont = pygame.font.SysFont("monospace", 25)


while not game_over:

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            sys.exit() # serve a far chiudere il programma se premiamo la x rossa in alto a dx

        if event.type == pygame.MOUSEMOTION: # funzione che serve a disegnare una figura e a farla spostare seguendo il cursore
            pygame.draw.rect(screen, BLACK, (0,0, width, squaresize))
            posx = event.pos[0]
            if turn == 0:
                pygame.draw.circle(screen,RED, (posx, int(squaresize/2)), radius)
            else:
                pygame.draw.circle(screen, YELLOW, (posx, int(squaresize/2)), radius)
        pygame.display.update()


        if event.type == pygame.MOUSEBUTTONDOWN:
            pygame.draw.rect(screen, BLACK, (0,0, width, squaresize))
            #print(event.pos)


            # input giocatore 1
            if turn == 0:
                posx = event.pos[0]
                col = int(math.floor(posx/ squaresize))
        
                if is_valid_location(board,col):
                  row = get_next_open_row(board,col)
                  drop_piece(board,row,col, 1)

                  if winning_move(board, 1):
                    label = myfont.render(" IL GIOCATORE 1.... HA VINTO!!! COMPLIMENTI!", 1, RED)
                    screen.blit(label, (40, 10)) # blit scrive sullo schermo la scritta indicata alle coordinate specificate
                    game_over = True
                    


            # input giocatore 2
            else:
                posx = event.pos[0]
                col = int(math.floor(posx/ squaresize))

                if is_valid_location(board,col):
                    row = get_next_open_row(board,col)
                    drop_piece(board,row,col, 2)

                    if winning_move(board, 2):
                      label = myfont.render(" IL GIOCATORE 2.... HA VINTO!!! COMPLIMENTI!", 1, YELLOW)
                      screen.blit(label, (40, 10)) 
                      game_over = True

            print_board(board)
            draw_board(board)

            turn += 1
            turn = turn % 2

            if game_over:
                pygame.time.wait(3000)# alla fine del programma aspetta il tempo specificato prima di chiudersi


